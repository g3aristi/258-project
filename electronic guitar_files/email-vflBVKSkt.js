// Generated by CoffeeScript 1.7.1
define(['jquery', 'modules/core/browser', 'modules/core/notify', 'modules/core/i18n', 'modules/core/uri', 'modules/clean/account/change_email_modals', 'modules/clean/account/email_verify', 'modules/clean/account/verify_email_modals', 'modules/clean/react/modal', 'modules/clean/viewer'], function($j, Browser, Notify, _arg, URI, _arg1, EmailVerify, _arg2, _arg3, Viewer) {
  var ChangeEmail, ChangeEmailModal, ChangeEmailWarningModal, ChangedEmailVerifiedModal, EmailVerification, EmailVerifiedModal, Modal, ResendVerifyEmailModal, VerifyEmailModal, VerifyEmailSentModal, _;
  _ = _arg._;
  ChangeEmailModal = _arg1.ChangeEmailModal, ChangeEmailWarningModal = _arg1.ChangeEmailWarningModal;
  VerifyEmailModal = _arg2.VerifyEmailModal, ResendVerifyEmailModal = _arg2.ResendVerifyEmailModal, VerifyEmailSentModal = _arg2.VerifyEmailSentModal, EmailVerifiedModal = _arg2.EmailVerifiedModal, ChangedEmailVerifiedModal = _arg2.ChangedEmailVerifiedModal;
  Modal = _arg3.Modal;
  EmailVerification = (function() {
    EmailVerification.prototype.polling = false;

    EmailVerification.prototype.show_resend = false;

    EmailVerification.getForRole = function(role) {
      if (!this.initalized) {
        this.legacy = new EmailVerification(null);
        this.personal = new EmailVerification('personal');
        this.work = new EmailVerification('work');
        this.initalized = true;
      }
      if (role === 'personal') {
        return this.personal;
      } else if (role === 'work') {
        return this.work;
      } else {
        return this.legacy;
      }
    };

    EmailVerification.get_for_user = function(user) {
      return this.getForRole(user.role);
    };

    EmailVerification.reset = function() {
      return this.initalized = false;
    };

    function EmailVerification(role) {
      var _ref;
      this.role = role;
      if (this.role) {
        this.user = Viewer.get_viewer().get_user_by_role(this.role, true);
      } else {
        this.user = Viewer.get_viewer().deprecated_first_user_in_the_cookie;
      }
      this.email_to_verify = (_ref = this.user) != null ? _ref.email : void 0;
      this.verify_for_change = false;
    }

    EmailVerification.prototype.set_email_to_verify = function(email_to_verify) {
      this.email_to_verify = email_to_verify;
      return this.verify_for_change = this.email_to_verify !== this.user.email;
    };

    EmailVerification.prototype.send_email = function(reason, on_send) {
      return EmailVerify.send_verification_email(this.user, this.email_to_verify, reason, on_send);
    };

    EmailVerification.prototype.flash_email_sent_notification = function() {
      return Notify.success(_('Verification email sent to %(email)s').format({
        email: this.email_to_verify
      }));
    };

    EmailVerification.prototype.ensure_polling = function(on_verify) {
      return EmailVerify.listen_for_verification(this.user, this.email_to_verify, (function(_this) {
        return function() {
          if (on_verify != null) {
            _this.user.is_email_verified = true;
            return on_verify();
          } else {
            return Browser.reload();
          }
        };
      })(this));
    };

    EmailVerification.prototype.email_sent = function(on_verify) {
      this.show_resend = true;
      this.show();
      this.flash_email_sent_notification();
      return this.ensure_polling(on_verify);
    };

    EmailVerification.prototype.show = function(on_verify) {
      if (this.show_resend) {
        return this.show_resend_verify_modal();
      }
      return this.show_verify_modal(on_verify);
    };

    EmailVerification.prototype.show_verify_modal = function(on_verify) {
      var reason;
      if (this.verify_for_change) {
        reason = 'change_email';
      } else {
        reason = EmailVerification.REASON;
      }
      return Modal.showInstance(new VerifyEmailModal({
        user: this.user,
        reason: reason,
        email: this.email_to_verify,
        onShowChange: (function(_this) {
          return function() {
            return ChangeEmail.show(_this.user);
          };
        })(this),
        onEmailSent: (function(_this) {
          return function() {
            var ev;
            ev = EmailVerification.get_for_user(_this.user);
            return ev.email_sent(on_verify);
          };
        })(this)
      }));
    };

    EmailVerification.prototype.show_resend_verify_modal = function() {
      var reason;
      if (this.verify_for_change) {
        reason = 'change_email';
      } else {
        reason = EmailVerification.REASON;
      }
      return Modal.showInstance(new ResendVerifyEmailModal({
        user: this.user,
        email: this.email_to_verify,
        reason: reason,
        onShowChange: (function(_this) {
          return function() {
            return ChangeEmail.show(_this.user);
          };
        })(this),
        onEmailSent: (function(_this) {
          return function() {
            var ev;
            ev = EmailVerification.get_for_user(_this.user);
            return ev.email_sent();
          };
        })(this)
      }));
    };

    EmailVerification.prototype.verified = function() {
      if (this.user.is_email_verified) {
        return true;
      } else {
        this.show();
        return false;
      }
    };

    EmailVerification.prototype.show_sent_modal = function() {
      return Modal.showInstance(new VerifyEmailSentModal({
        email: this.email_to_verify
      }));
    };

    EmailVerification.prototype.show_verified_modal = function() {
      return Modal.showInstance(new EmailVerifiedModal({
        reason: EmailVerification.REASON,
        email: this.email_to_verify
      }));
    };

    EmailVerification.prototype.show_verified_and_changed_modal = function() {
      return Modal.showInstance(new ChangedEmailVerifiedModal({
        user: this.user,
        email: this.email_to_verify
      }));
    };

    return EmailVerification;

  })();
  ChangeEmail = {
    inbox_counts: {},
    set_inbox_counts: function(counts) {
      return $j.extend(this.inbox_counts, counts);
    },
    show: function(user_id) {
      var user;
      user = Viewer.get_viewer().get_user_by_id(user_id);
      if (this._should_show_warning(user)) {
        return this._show_warning_modal(user);
      } else {
        return this._show_change_modal(user);
      }
    },
    _should_show_warning: function(user) {
      var has_inbox_msgs, is_paired, is_sso_user, is_work_user;
      is_paired = Viewer.get_viewer().is_paired;
      is_work_user = is_paired && user.role === Constants.ROLE_WORK;
      is_sso_user = is_work_user && user.sso_required;
      has_inbox_msgs = this.inbox_counts[user.id] > 0;
      return is_sso_user || has_inbox_msgs;
    },
    _show_change_modal: (function(_this) {
      return function(user) {
        return Modal.showInstance(new ChangeEmailModal({
          user: user,
          onChange: function(email) {
            ChangeEmail.trigger_change(user, email);
            if (URI.parse(Browser.get_href()).path !== '/account') {
              return Browser.redirect('/home?send_verification_email=1');
            } else if (email !== user.email) {
              return Browser.reload();
            }
          },
          onVerificationCheck: function(email) {
            var ev;
            ChangeEmail.trigger_change(user, email, true);
            ev = EmailVerification.get_for_user(user);
            ev.set_email_to_verify(email);
            return ev.email_sent();
          }
        }));
      };
    })(this),
    _show_warning_modal: function(user) {
      return Modal.showInstance(new ChangeEmailWarningModal({
        user: user,
        inboxCount: this.inbox_counts[user.id],
        onContinue: (function(_this) {
          return function() {
            return _this._show_change_modal(user);
          };
        })(this)
      }));
    },
    listen_for_change: function(user, on_change) {
      var event_name;
      event_name = this._email_change_event_for_user(user);
      return $j(document).on(event_name, on_change);
    },
    trigger_change: function(user, email, requires_verification) {
      var event_name;
      event_name = this._email_change_event_for_user(user);
      return $j(document).trigger(event_name, [email, requires_verification]);
    },
    _email_change_event_for_user: function(user) {
      return "db:email_changed:" + user.id;
    }
  };
  window.EmailVerification = EmailVerification;
  window.ChangeEmail = ChangeEmail;
  return {
    EmailVerification: EmailVerification,
    ChangeEmail: ChangeEmail
  };
});

//# sourceMappingURL=email.map
