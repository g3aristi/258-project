// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['jquery'], function($j) {
  var BubblePicker;
  BubblePicker = (function() {
    BubblePicker.CHANGED = "db:bubblepicker:changed";

    function BubblePicker($bubble_picker) {
      this.$bubble_picker = $bubble_picker;
      this.enable_option = __bind(this.enable_option, this);
      this.disable_option = __bind(this.disable_option, this);
      this.show_dropdown = __bind(this.show_dropdown, this);
      this.hide_dropdown = __bind(this.hide_dropdown, this);
      this.set_value = __bind(this.set_value, this);
      this._listen = __bind(this._listen, this);
      this.$label_wrapper = this.$bubble_picker.find(".bubble-picker-label-wrapper");
      this.$label = this.$bubble_picker.find(".bubble-picker-label");
      this.$dropdown = this.$bubble_picker.find(".bubble-picker-dropdown");
      this._dropdown_shown = false;
      this._listen();
    }

    BubblePicker.prototype._listen = function() {
      $j(document).click((function(_this) {
        return function(e) {
          var clicked_in_dropdown, clicked_in_label;
          clicked_in_label = $j(e.target).closest(_this.$label_wrapper).length > 0;
          clicked_in_dropdown = $j(e.target).closest(_this.$dropdown).length > 0;
          if (_this._dropdown_shown && !clicked_in_dropdown) {
            return _this.hide_dropdown();
          } else if (clicked_in_label) {
            return _this.show_dropdown();
          }
        };
      })(this));
      return this.$dropdown.find(".bubble-picker-option:not('.disabled')").click((function(_this) {
        return function(e) {
          var $option, old_val;
          $option = $j(e.currentTarget);
          if ($option.hasClass('disabled')) {
            return;
          }
          old_val = _this.get_value();
          _this.set_value($option.data("value"));
          _this.$bubble_picker.trigger(BubblePicker.CHANGED, {
            clicked_val: $option.data("value"),
            old_val: old_val
          });
          return _this.hide_dropdown();
        };
      })(this));
    };

    BubblePicker.prototype.get_value = function() {
      return this.$bubble_picker.attr('data-selected-value');
    };

    BubblePicker.prototype.set_value = function(value) {
      var $option;
      this.$bubble_picker.attr('data-selected-value', value);
      this.$label.empty();
      $option = this.$bubble_picker.find("[data-value='" + value + "']");
      return this.$label.html($option.clone().html());
    };

    BubblePicker.prototype.hide_dropdown = function() {
      this.$dropdown.hide();
      return this._dropdown_shown = false;
    };

    BubblePicker.prototype.show_dropdown = function() {
      this.$dropdown.show();
      return this._dropdown_shown = true;
    };

    BubblePicker.prototype.disable_option = function(option_value, tooltip_msg) {
      var $option_row, option;
      option = this.$bubble_picker.find(".bubble-picker-option[data-value=" + option_value + "]:not('.disabled')");
      if (option.length > 0) {
        $option_row = $j(option.find(".role-option"));
        $option_row.attr('saved-title', $option_row.attr('title'));
        $option_row.attr('title', tooltip_msg);
      }
      return option.addClass('disabled');
    };

    BubblePicker.prototype.enable_option = function(option_value) {
      var $option_row, option;
      option = this.$bubble_picker.find(".bubble-picker-option.disabled[data-value=" + option_value + "]");
      $option_row = $j(option.find(".role-option"));
      if ($option_row.attr('saved-title')) {
        $option_row.attr('title', $option_row.attr('saved-title'));
        $option_row.removeAttr('saved-title');
      }
      return option.removeClass('disabled');
    };

    return BubblePicker;

  })();
  window.BubblePicker = BubblePicker;
  return BubblePicker;
});

//# sourceMappingURL=bubble_picker.map
