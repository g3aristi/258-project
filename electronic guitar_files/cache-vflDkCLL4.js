// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['modules/clean/ajax', 'modules/clean/contacts/list'], function(ajax, ContactsList) {
  var ContactsCache;
  ContactsCache = (function() {
    ContactsCache.HAVENT_LOADED = 0;

    ContactsCache.LOADING_NONE_AVAILABLE = 1;

    ContactsCache.LOADING_STALE_AVAILABLE = 2;

    ContactsCache.LOADED = 3;

    function ContactsCache() {
      this._update_loading_state = __bind(this._update_loading_state, this);
      this._invoke_callbacks = __bind(this._invoke_callbacks, this);
      this._invoke_all_callbacks = __bind(this._invoke_all_callbacks, this);
      this.unregister_for_updates = __bind(this.unregister_for_updates, this);
      this.register_for_updates = __bind(this.register_for_updates, this);
      this.loading_state = ContactsCache.HAVENT_LOADED;
      this.callbacks = {};
      this.one_time_callbacks = [];
    }

    ContactsCache.prototype.load_contacts = function(force_reload, include_rooms, load_contacts_callback) {
      var contacts_loaded_callback;
      if ((load_contacts_callback != null) && __indexOf.call(this.one_time_callbacks, load_contacts_callback) < 0) {
        this.one_time_callbacks.push(load_contacts_callback);
      }
      if (!force_reload) {
        if (this.loading_state === ContactsCache.LOADING_NONE_AVAILABLE) {
          return;
        } else if (this.loading_state !== ContactsCache.HAVENT_LOADED) {
          this._invoke_all_callbacks();
          return;
        }
      } else {
        if (this.loading_state === ContactsCache.LOADING_STALE_AVAILABLE) {
          return;
        }
      }
      if (this.loading_state === ContactsCache.LOADED) {
        this._update_loading_state(ContactsCache.LOADING_STALE_AVAILABLE);
      } else {
        this._update_loading_state(ContactsCache.LOADING_NONE_AVAILABLE);
      }
      contacts_loaded_callback = (function(_this) {
        return function(contacts, new_state) {
          var contact_list;
          _this._update_loading_state(new_state);
          contact_list = ContactsList.create_contacts_list(contacts);
          _this.precached_contacts = contact_list.contacts;
          _this.cached_contacts = contact_list;
          return _this._invoke_all_callbacks();
        };
      })(this);
      if (this.loading_state === ContactsCache.LOADING_NONE_AVAILABLE) {
        ajax.BackgroundRequest({
          url: '/get_cached_contacts',
          data: {
            include_rooms: include_rooms
          },
          success: (function(_this) {
            return function(data, status, xhr) {
              var json;
              if (_this.loading_state === ContactsCache.LOADING_NONE_AVAILABLE) {
                json = JSON.parse(data);
                if (json.length) {
                  return contacts_loaded_callback(json, ContactsCache.LOADING_STALE_AVAILABLE);
                }
              }
            };
          })(this)
        });
      }
      return ajax.BackgroundRequest({
        url: '/get_refreshed_contacts?long_running=1',
        data: {
          include_rooms: include_rooms
        },
        success: (function(_this) {
          return function(data, status, xhr) {
            var json;
            json = JSON.parse(data);
            return contacts_loaded_callback(json, ContactsCache.LOADED);
          };
        })(this)
      });
    };

    ContactsCache.prototype.register_for_updates = function(key, callback) {
      return this.callbacks[key] = callback;
    };

    ContactsCache.prototype.unregister_for_updates = function(key) {
      if (__indexOf.call(Object.keys(this.callbacks), key) >= 0) {
        return delete this.callbacks[key];
      }
    };

    ContactsCache.prototype._invoke_all_callbacks = function() {
      this._invoke_callbacks(this.one_time_callbacks, true);
      return this._invoke_callbacks(this.callbacks, false);
    };

    ContactsCache.prototype._invoke_callbacks = function(callbacks, is_one_time) {
      var key, _i, _len, _ref, _results;
      _ref = Object.keys(callbacks);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        callbacks[key](this.cached_contacts);
        if (is_one_time) {
          _results.push(delete callbacks[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ContactsCache.prototype._update_loading_state = function(new_state) {
      assert(new_state === ContactsCache.LOADING_NONE_AVAILABLE || new_state === ContactsCache.LOADING_STALE_AVAILABLE || new_state === ContactsCache.LOADED);
      return this.loading_state = new_state;
    };

    return ContactsCache;

  })();
  window.DefaultContactsCache = new ContactsCache();
  return {
    ContactsCache: ContactsCache,
    DefaultContactsCache: DefaultContactsCache
  };
});

//# sourceMappingURL=cache.map
