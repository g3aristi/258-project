// Generated by CoffeeScript 1.7.1
define([], function() {
  var Cash, CashCurrenciesDoNotMatch, CashNeedsAmountAndCurrency, CashUtil;
  CashUtil = (function() {
    function CashUtil() {}

    CashUtil._groupSymbol = ",";

    CashUtil._decimalSymbol = ".";

    CashUtil._minusSignSymbol = "-";

    CashUtil._currencyFormatMap = {
      'USD': '$%v'
    };

    CashUtil.set_locale_number_format = function(_groupSymbol, _decimalSymbol, _minusSignSymbol) {
      CashUtil._groupSymbol = _groupSymbol != null ? _groupSymbol : ",";
      CashUtil._decimalSymbol = _decimalSymbol != null ? _decimalSymbol : ".";
      CashUtil._minusSignSymbol = _minusSignSymbol != null ? _minusSignSymbol : "-";
    };

    CashUtil.set_currency_format_map = function(_currencyFormatMap) {
      CashUtil._currencyFormatMap = _currencyFormatMap;
    };

    CashUtil._formatAmountThousandsHelper = function(amount) {
      var base;
      base = Math.abs(parseInt(amount)).toFixed(0) + '';
      if (base.length <= 3) {
        return base;
      }
      return CashUtil._formatAmountThousandsHelper(base.substr(0, base.length - 3)) + CashUtil._groupSymbol + base.substr(base.length - 3);
    };

    CashUtil.roundCurrency = function(amount, currency, precision) {
      if (currency == null) {
        currency = 'USD';
      }
      if (precision == null) {
        precision = 2;
      }
      if (amount % 1 === 0) {
        precision = 0;
      }
      return this.formatCurrency(amount, currency, precision);
    };

    CashUtil.formatCurrency = function(amount, currency, precision) {
      var formattedAmount, _ref;
      if (currency == null) {
        currency = 'USD';
      }
      if (precision == null) {
        precision = 2;
      }
      if (currency === 'JPY') {
        precision = 0;
      }
      formattedAmount = CashUtil.formatNumber(amount, precision);
      return ((_ref = CashUtil._currencyFormatMap[currency]) != null ? _ref.replace('%v', formattedAmount) : void 0) || (formattedAmount + " " + currency);
    };

    CashUtil.formatNumber = function(amount, precision) {
      if (precision == null) {
        precision = 2;
      }
      return (amount < 0 ? CashUtil._minusSignSymbol : '') + CashUtil._formatAmountThousandsHelper(amount) + (precision > 0 ? CashUtil._decimalSymbol + amount.toFixed(precision).split('.')[1] : '');
    };

    return CashUtil;

  })();
  CashCurrenciesDoNotMatch = (function() {
    function CashCurrenciesDoNotMatch(cash1, cash2) {
      this.cash1 = cash1;
      this.cash2 = cash2;
    }

    return CashCurrenciesDoNotMatch;

  })();
  CashNeedsAmountAndCurrency = (function() {
    function CashNeedsAmountAndCurrency() {}

    return CashNeedsAmountAndCurrency;

  })();
  Cash = (function() {
    function Cash(amount, currency) {
      this.currency = currency;
      if ((!amount && amount !== 0) || !this.currency) {
        throw new CashNeedsAmountAndCurrency();
      }
      this.amount = parseFloat(amount);
    }

    Cash.prototype.add = function(cash) {
      if (this.currency !== cash.currency) {
        throw new CashCurrenciesDoNotMatch(self, cash);
      }
      return new Cash(this.amount + cash.amount, this.currency);
    };

    Cash.prototype.subtract = function(cash) {
      return this.add(new Cash(-cash.amount, cash.currency));
    };

    Cash.prototype.multiply = function(scalar) {
      return new Cash(this.amount * scalar, this.currency);
    };

    Cash.prototype.divide = function(scalar) {
      return new Cash(this.amount / scalar, this.currency);
    };

    Cash.prototype.round = function(precision) {
      var power;
      if (precision == null) {
        precision = 2;
      }
      power = Math.pow(10, precision);
      return new Cash(Math.round(this.amount * power) / power, this.currency);
    };

    Cash.prototype.toString = function(precision) {
      if (precision == null) {
        precision = 2;
      }
      'Cash\'s toString uses roundCurrency (see CashUtil) to round numbers.';
      if (this.currency === "JPY") {
        precision = 0;
      }
      return CashUtil.roundCurrency(this.amount, this.currency, precision);
    };

    Cash.fromObject = function(object) {
      return new Cash(object.amount, object.currency);
    };

    return Cash;

  })();
  window.Cash = Cash;
  window.CashUtil = CashUtil;
  return {
    CashUtil: CashUtil,
    CashCurrenciesDoNotMatch: CashCurrenciesDoNotMatch,
    CashNeedsAmountAndCurrency: CashNeedsAmountAndCurrency,
    Cash: Cash
  };
});

//# sourceMappingURL=cash.map
