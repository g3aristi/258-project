// Generated by CoffeeScript 1.7.1
define(['external/react', 'jquery', 'modules/core/i18n', 'modules/core/dom', 'modules/clean/react/button', 'modules/clean/keycode'], function(React, $j, _arg, dom, button, KeyCode) {
  var MODAL_ROOT_ID, Modal, SimpleModal, d, _, _getModalRoot;
  _ = _arg._;
  d = React.DOM;
  MODAL_ROOT_ID = 'react-modal-root';
  _getModalRoot = function(createIfMissing) {
    var id, modalParent;
    if (createIfMissing == null) {
      createIfMissing = true;
    }
    id = MODAL_ROOT_ID;
    modalParent = $j("#" + id);
    if (!modalParent.length && createIfMissing) {
      modalParent = $j('<div />').attr({
        id: id
      }).prependTo('body');
    }
    return modalParent[0];
  };
  Modal = React.createClass({
    statics: {
      showInstance: function(modalInstance) {
        var modalRoot;
        modalRoot = _getModalRoot();
        React.unmountComponentAtNode(modalRoot);
        return React.renderComponent(modalInstance, modalRoot);
      }
    },
    close: function() {
      var root;
      root = _getModalRoot();
      if (root) {
        return React.unmountComponentAtNode(root);
      }
    },
    _invokeCallbackAndClose: function(callback, e, forceClose) {
      if (callback != null) {
        if (typeof callback.call === "function") {
          callback.call(this, e);
        }
      }
      if (e.defaultPrevented) {
        return;
      }
      if (this.props.autoClose || forceClose) {
        return this.close();
      }
    },
    _dismiss: function(e) {
      return this._invokeCallbackAndClose(this.props.onDismiss, e, true);
    },
    _accept: function(e) {
      return this._invokeCallbackAndClose(this.props.onAccept, e, false);
    },
    propTypes: {
      acceptButtonText: React.PropTypes.string,
      dismissButtonText: React.PropTypes.string,
      altAction: React.PropTypes.renderable,
      onAccept: React.PropTypes.func,
      onDismiss: React.PropTypes.func,
      onShow: React.PropTypes.func,
      buttonComponent: React.PropTypes.component,
      style: React.PropTypes.oneOf(['default', 'clean'])
    },
    getDefaultProps: function() {
      return {
        acceptButtonText: _('OK'),
        dismissButtonText: null,
        buttonComponent: null,
        onAccept: function() {},
        onDismiss: function() {},
        onShow: function() {},
        autoClose: true,
        style: 'default'
      };
    },
    _fitInViewport: function() {
      var MAX_DISTANCE_FROM_TOP, component, contentElement, modalElement, modalElementHeight, overshoot, viewportHeight;
      MAX_DISTANCE_FROM_TOP = 90;
      viewportHeight = $j(window).height();
      component = $j(this.getDOMNode());
      modalElement = component.find('.db-modal');
      contentElement = component.find('.db-modal-content');
      modalElementHeight = modalElement.height();
      if (this.props.width) {
        modalElement.css({
          width: this.props.width,
          marginLeft: -this.props.width / 2
        });
      } else {
        modalElement.css({
          marginLeft: -modalElement.width() / 2
        });
      }
      if (modalElementHeight > viewportHeight) {
        overshoot = modalElementHeight - viewportHeight;
        contentElement.css({
          maxHeight: Math.max(50, contentElement.height() - overshoot),
          overflowY: 'auto'
        });
        modalElement.css({
          top: 0
        });
      } else if ((viewportHeight - modalElementHeight) < 2 * MAX_DISTANCE_FROM_TOP) {
        modalElement.css({
          top: '50%',
          marginTop: -(0.5 * modalElementHeight)
        });
      } else {
        modalElement.css({
          top: MAX_DISTANCE_FROM_TOP
        });
      }
      return modalElement.css({
        position: 'fixed'
      });
    },
    _focus: function() {
      var $focusElement, $input;
      $focusElement = $j(this.refs.modal.getDOMNode());
      $input = $focusElement.find("input[type=text], input[type=email]").first();
      if ($input.length) {
        $focusElement = $input;
      } else if (this.refs.primaryButton) {
        $focusElement = $j(this.refs.primaryButton.getDOMNode());
      } else if (this.refs.tertiaryButton) {
        $focusElement = $j(this.refs.tertiaryButton.getDOMNode());
      }
      return $focusElement.focus();
    },
    _keyDown: function(event) {
      event.stopPropagation();
      if (event.which === KeyCode.ESC) {
        this._dismiss(event);
      }
      if (event.which === KeyCode.BACKSPACE && !dom.focus_in_input()) {
        event.preventDefault();
        return this._dismiss(event);
      }
    },
    _renderButtons: function() {
      var buttons;
      if (this.props.buttonComponent) {
        return this.props.buttonComponent;
      }
      buttons = [];
      if (this.props.submitting) {
        buttons.push(d.span({
          className: 'dbmodal-loading'
        }, d.img({
          src: '/static/images/icons/ajax-loading-small.gif'
        })));
      }
      if (this.props.acceptButtonText) {
        buttons.push(button.button({
          ref: 'primaryButton',
          className: 'dbmodal-button',
          importance: 'primary',
          onClick: this._accept
        }, this.props.acceptButtonText));
      }
      if (this.props.dismissButtonText) {
        buttons.push(button.button({
          ref: 'tertiaryButton',
          className: 'dbmodal-button',
          importance: 'tertiary',
          onClick: this._dismiss
        }, this.props.dismissButtonText));
      }
      if (buttons.length) {
        return d.div({
          className: 'db-modal-buttons'
        }, buttons);
      }
    },
    _renderAltAction: function() {
      if (this.props.altAction) {
        return d.div({
          className: 'db-modal__alt-action'
        }, this.props.altAction);
      }
    },
    componentDidMount: function() {
      var _base;
      $j(document).trigger("modalOpened", this);
      dom.scroll_lock_document();
      $j(this.getDOMNode()).find('img').on('load', this._fitInViewport);
      this._fitInViewport();
      $j(this.refs.modal.getDOMNode()).on('keydown', this._keyDown);
      this._focus();
      return typeof (_base = this.props).onShow === "function" ? _base.onShow() : void 0;
    },
    componentWillUnmount: function() {
      $j(document).trigger("modalClosed", this);
      dom.scroll_unlock_document();
      return $j(this.refs.modal.getDOMNode()).off('keydown', this._keyDown);
    },
    render: function() {
      var modalClasses;
      modalClasses = this.props.className;
      if (this.props.style === 'clean') {
        modalClasses += ' db-modal--clean-style';
      }
      return d.div({
        className: modalClasses
      }, d.div({
        className: 'db-modal-overlay',
        onClick: this._dismiss
      }), d.div({
        ref: 'modal',
        className: 'db-modal',
        tabIndex: 0
      }, d.div({
        className: 'db-modal-box'
      }, d.span({
        className: 'db-modal-x',
        onClick: this._dismiss
      }), d.h2({
        className: 'db-modal-title'
      }, d.div({
        className: 'db-modal-title-text'
      }, this.props.title)), d.div({
        className: 'db-modal-content'
      }, this.props.children, this._renderButtons(), this._renderAltAction()))));
    }
  });
  SimpleModal = {
    show: function(options) {
      var props;
      props = {
        acceptButtonText: options.confirm_text,
        onAccept: options.confirm_callback,
        dismissButtonText: options.cancel_text,
        onDismiss: options.cancel_callback,
        title: options.title_text,
        width: options.width,
        className: "simple-modal"
      };
      return Modal.showInstance(new Modal(props, React.DOM.div({
        className: "simple-modal-content",
        dangerouslySetInnerHTML: {
          __html: options.body_html
        }
      })));
    }
  };
  window.SimpleModal = SimpleModal;
  return {
    Modal: Modal,
    SimpleModal: SimpleModal
  };
});

//# sourceMappingURL=modal.map
