// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['jquery', 'modules/clean/payments/cash', 'modules/clean/payments/validation'], function($j, _arg, payment_validation) {
  var Cash, DfBTransitionInfo, DfBTransitionInfoFetcher, DfbTransitionSpaceParams;
  Cash = _arg.Cash;
  DfbTransitionSpaceParams = (function() {
    function DfbTransitionSpaceParams(plan_id, schedule_id, license_ids_and_counts, currency, country_code, vat_id) {
      this.plan_id = plan_id;
      this.schedule_id = schedule_id;
      this.license_ids_and_counts = license_ids_and_counts;
      this.currency = currency;
      this.country_code = country_code;
      this.vat_id = vat_id;
    }

    DfbTransitionSpaceParams.prototype.set_only_license_count = function(count) {
      var license_id;
      license_id = Object.keys(this.license_ids_and_counts)[0];
      return this.license_ids_and_counts[license_id] = count;
    };

    DfbTransitionSpaceParams.prototype.get_only_license_count = function() {
      var license_id;
      license_id = Object.keys(this.license_ids_and_counts)[0];
      return this.license_ids_and_counts[license_id];
    };

    DfbTransitionSpaceParams.prototype.set_country_code = function(country_code) {
      this.country_code = country_code;
    };

    DfbTransitionSpaceParams.prototype.set_vat_id = function(vat_id) {
      if (vat_id === '' || !payment_validation.validate_vat(this.country_code, vat_id)) {
        return this.vat_id = '';
      } else {
        return this.vat_id = vat_id;
      }
    };

    DfbTransitionSpaceParams.prototype.cache_key = function() {
      return [this.plan_id, this.schedule_id, this.get_only_license_count(), this.currency, this.country_code, this.vat_id].join(":");
    };

    DfbTransitionSpaceParams.prototype.to_json = function() {
      return {
        plan_ids: JSON.stringify([this.plan_id]),
        schedule_ids: JSON.stringify([this.schedule_id]),
        license_ids_and_counts: JSON.stringify(this.license_ids_and_counts),
        currencies: JSON.stringify([this.currency]),
        country_code: this.country_code,
        vat_id: this.vat_id
      };
    };

    DfbTransitionSpaceParams.from_transition_view_model = function(tvm) {
      var allocated_license, license_ids_and_counts, _i, _len, _ref, _ref1, _ref2;
      license_ids_and_counts = {};
      _ref = tvm.state.allocated_licenses;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        allocated_license = _ref[_i];
        license_ids_and_counts[allocated_license.license_id] = allocated_license.license_count;
      }
      return new DfbTransitionSpaceParams(tvm.state.plan.id, tvm.state.schedule.id, license_ids_and_counts, tvm.state.currency, (_ref1 = tvm.read_only_invoice) != null ? _ref1.tax_country_code : void 0, (_ref2 = tvm.read_only_invoice) != null ? _ref2.tax_exclusion_id : void 0);
    };

    return DfbTransitionSpaceParams;

  })();
  DfBTransitionInfo = (function() {
    function DfBTransitionInfo(transition_view_model) {
      this.transition_view_model = transition_view_model;
      if (this.transition_view_model.read_only_invoice) {
        this.current_total = Cash.fromObject(this.transition_view_model.read_only_invoice.total);
      } else {
        this.current_total = new Cash(0, this.transition_view_model.state.currency);
      }
      if (this.transition_view_model.state.per_license_prices.length) {
        this.per_license_price = Cash.fromObject(this.transition_view_model.state.per_license_prices[0].price);
      } else {
        this.per_license_price = new Cash(0, this.transition_view_model.state.currency);
      }
      this.recurring_total = Cash.fromObject(this.transition_view_model.state.total_recurring_price);
    }

    return DfBTransitionInfo;

  })();
  DfBTransitionInfoFetcher = (function() {
    function DfBTransitionInfoFetcher(default_transition_view_model) {
      this.default_transition_view_model = default_transition_view_model;
      this._get_transition_info_for = __bind(this._get_transition_info_for, this);
      this._add_to_cache = __bind(this._add_to_cache, this);
      this.has_inflight_request = __bind(this.has_inflight_request, this);
      this.transition_view_model_requests = {};
      this.transition_info_cache = {};
      this._add_to_cache(this.default_transition_view_model);
    }

    DfBTransitionInfoFetcher.prototype.get = function(success_cb, options) {
      var cache_key, existing_transition_info, transition_params;
      transition_params = DfbTransitionSpaceParams.from_transition_view_model(this.default_transition_view_model);
      if (options.total_users) {
        transition_params.set_only_license_count(options.total_users);
      }
      if (options.country_code) {
        transition_params.set_country_code(options.country_code);
      }
      if (options.vat_id) {
        transition_params.set_vat_id(options.vat_id);
      }
      cache_key = transition_params.cache_key();
      existing_transition_info = this._get_transition_info_for(cache_key);
      if (existing_transition_info) {
        success_cb(existing_transition_info);
        return;
      }
      if (this.transition_view_model_requests[cache_key]) {
        return;
      }
      this.transition_view_model_requests[cache_key] = true;
      return $j.ajax({
        url: '/business/transition-model',
        type: 'GET',
        dataType: 'json',
        data: transition_params.to_json(),
        success: (function(_this) {
          return function(transition_view_models) {
            var transition_view_model, _i, _len;
            delete _this.transition_view_model_requests[cache_key];
            for (_i = 0, _len = transition_view_models.length; _i < _len; _i++) {
              transition_view_model = transition_view_models[_i];
              _this._add_to_cache(transition_view_model);
            }
            transition_view_model = transition_view_models[0];
            cache_key = DfbTransitionSpaceParams.from_transition_view_model(transition_view_model).cache_key();
            return success_cb(_this._get_transition_info_for(cache_key));
          };
        })(this),
        error: (function(_this) {
          return function(req) {
            return delete _this.transition_view_model_requests[cache_key];
          };
        })(this)
      });
    };

    DfBTransitionInfoFetcher.prototype.has_inflight_request = function() {
      return Object.keys(this.transition_view_model_requests).length;
    };

    DfBTransitionInfoFetcher.prototype._add_to_cache = function(transition_view_model) {
      var cache_key, transition_info;
      cache_key = DfbTransitionSpaceParams.from_transition_view_model(transition_view_model).cache_key();
      transition_info = new DfBTransitionInfo(transition_view_model);
      return this.transition_info_cache[cache_key] = transition_info;
    };

    DfBTransitionInfoFetcher.prototype._get_transition_info_for = function(cache_key) {
      if (cache_key in this.transition_info_cache) {
        return this.transition_info_cache[cache_key];
      }
      return null;
    };

    return DfBTransitionInfoFetcher;

  })();
  window.DfBTransitionInfoFetcher = DfBTransitionInfoFetcher;
  return {
    DfBTransitionInfo: DfBTransitionInfo,
    DfBTransitionInfoFetcher: DfBTransitionInfoFetcher
  };
});

//# sourceMappingURL=dfb_util.map
