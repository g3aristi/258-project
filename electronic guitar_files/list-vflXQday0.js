// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['jquery', 'modules/clean/em_string', 'modules/clean/contacts/types'], function($j, Emstring, ContactTypes) {
  var ContactsList;
  ContactsList = (function() {
    ContactsList._format_contact_array = function(contact_list) {
      var CONTACT_IMPORTER_SNIPPET_LEN, contact, _i, _len;
      CONTACT_IMPORTER_SNIPPET_LEN = 22;
      for (_i = 0, _len = contact_list.length; _i < _len; _i++) {
        contact = contact_list[_i];
        if (contact.email != null) {
          contact.email_snippet = Emstring.em_snippet(contact.email, CONTACT_IMPORTER_SNIPPET_LEN);
        }
        if (contact.name != null) {
          contact.name = Emstring.em_snippet(contact.name, CONTACT_IMPORTER_SNIPPET_LEN);
        }
      }
      return contact_list;
    };

    ContactsList.create_contacts_list = function(contacts) {
      contacts = ContactsList._format_contact_array(contacts);
      return new ContactsList(contacts);
    };

    function ContactsList(contacts) {
      var contact;
      this.contacts = contacts;
      this._lowercaseContact = __bind(this._lowercaseContact, this);
      this._excludeType = __bind(this._excludeType, this);
      this.sortByTeamFirst = __bind(this.sortByTeamFirst, this);
      this.excludeNonTeam = __bind(this.excludeNonTeam, this);
      this.excludeTeamMembers = __bind(this.excludeTeamMembers, this);
      this.excludeRooms = __bind(this.excludeRooms, this);
      this.excludeFacebook = __bind(this.excludeFacebook, this);
      this.excludeNewStyleGroups = __bind(this.excludeNewStyleGroups, this);
      this.excludeGroups = __bind(this.excludeGroups, this);
      this.excludeMe = __bind(this.excludeMe, this);
      this.excludeByEmail = __bind(this.excludeByEmail, this);
      this.includeForUser = __bind(this.includeForUser, this);
      this.slice = __bind(this.slice, this);
      this.length = __bind(this.length, this);
      this.filterContacts = __bind(this.filterContacts, this);
      this.lcontacts = (function() {
        var _i, _len, _ref, _results;
        _ref = this.contacts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          contact = _ref[_i];
          _results.push(this._lowercaseContact(contact));
        }
        return _results;
      }).call(this);
    }

    ContactsList.prototype.filterContacts = function(filter) {
      var contacts;
      contacts = this.contacts.filter(filter);
      return new ContactsList(contacts);
    };

    ContactsList.prototype.length = function() {
      return this.contacts.length;
    };

    ContactsList.prototype.slice = function(begin, end) {
      return new ContactsList(this.contacts.slice(begin, end));
    };

    ContactsList.prototype.includeForUser = function(owning_user_id) {
      return this.filterContacts(function(contact) {
        return contact.owning_user_id === owning_user_id;
      });
    };

    ContactsList.prototype.excludeByEmail = function(emails) {
      var email, lowercase_emails;
      lowercase_emails = [
        (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = emails.length; _i < _len; _i++) {
            email = emails[_i];
            _results.push(email.toLowerCase());
          }
          return _results;
        })()
      ];
      return this.filterContacts((function(_this) {
        return function(contact) {
          var _ref;
          return !(_ref = contact.email.toLowerCase(), __indexOf.call(lowercase_emails, _ref) >= 0);
        };
      })(this));
    };

    ContactsList.prototype.excludeMe = function() {
      return this.filterContacts(function(contact) {
        return !contact.is_owner;
      });
    };

    ContactsList.prototype.excludeGroups = function() {
      return this._excludeType(ContactTypes.USER_GROUP);
    };

    ContactsList.prototype.excludeNewStyleGroups = function() {
      return this._excludeType(ContactTypes.NEW_STYLE_GROUP);
    };

    ContactsList.prototype.excludeFacebook = function() {
      return this._excludeType(ContactTypes.FB);
    };

    ContactsList.prototype.excludeRooms = function() {
      return this._excludeType(ContactTypes.CAROUSEL_ROOM);
    };

    ContactsList.prototype.excludeTeamMembers = function() {
      return this.filterContacts(function(contact) {
        return !contact.team;
      });
    };

    ContactsList.prototype.excludeNonTeam = function() {
      return this.filterContacts(function(contact) {
        return contact.team;
      });
    };

    ContactsList.prototype.sortByTeamFirst = function() {
      var contact, others, teams_groups, _i, _len, _ref;
      teams_groups = [];
      others = [];
      _ref = this.contacts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        contact = _ref[_i];
        if (contact.team || contact.type === ContactTypes.USER_GROUP) {
          teams_groups.push(contact);
        } else {
          others.push(contact);
        }
      }
      return new ContactsList(teams_groups.concat(others));
    };

    ContactsList.prototype._excludeType = function(type) {
      return this.filterContacts(function(contact) {
        return contact.type !== type;
      });
    };

    ContactsList.prototype._lowercaseContact = function(contact) {
      var key, lowercase_contact, value;
      lowercase_contact = {};
      for (key in contact) {
        value = contact[key];
        if (typeof value === "string" || value instanceof String) {
          value = value.toLowerCase();
        }
        lowercase_contact[key] = value;
      }
      return lowercase_contact;
    };

    return ContactsList;

  })();
  window.ContactsList = ContactsList;
  return ContactsList;
});

//# sourceMappingURL=list.map
