// Generated by CoffeeScript 1.7.1
define(['external/react', 'jquery', 'external/underscore'], function(React, $j, $u) {
  var cx, d, text_input_gen;
  cx = React.addons.classSet;
  d = React.DOM;
  text_input_gen = function(tag, type) {
    return React.createClass({
      render: function() {
        var attrs, c, classes, container_classes, error_div, input, _i, _len, _ref, _ref1, _ref2;
        classes = {
          'text-input-input': true,
          'autofocus': this.props.autofocus,
          'password-input': type === "password"
        };
        container_classes = {
          'text-input': true,
          'text-input-inline': this.props.inline,
          'textarea-input': tag === 'textarea'
        };
        container_classes[this.props.variant || 'standard'] = true;
        if (this.props.className != null) {
          _ref = this.props.className.split(/\s/);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            container_classes[c] = true;
          }
        }
        attrs = $u.omit(this.props, 'className', 'onChange', 'value', 'valueLink', 'ref');
        input = d[tag]($u.extend({
          className: cx(classes),
          type: type,
          value: this.props.value || ((_ref1 = this.props.valueLink) != null ? _ref1.value : void 0) || this.state.value,
          onChange: this.onChangeInternal,
          ref: "inputComponent"
        }, attrs));
        error_div = this.renderError();
        return d.div({
          className: cx(container_classes)
        }, !this.props['disable-errors'] && !this.props['error-after'] ? error_div : void 0, d.div({
          className: 'text-input-wrapper'
        }, input, !(this.props.value || ((_ref2 = this.props.valueLink) != null ? _ref2.value : void 0) || this.state.value) ? d.label({
          htmlFor: this.props.id
        }, this.props.label) : void 0), !this.props['disable-errors'] && this.props['error-after'] ? error_div : void 0);
      },
      renderError: function() {
        var _ref, _ref1;
        if (((_ref = this.props.error) != null ? _ref.message_html : void 0) != null) {
          return d.div({
            className: 'text-input-error-wrapper',
            dangerouslySetInnerHTML: {
              __html: this.props.error.message_html
            }
          });
        } else {
          return d.div({
            className: 'text-input-error-wrapper'
          }, (_ref1 = this.props.error) != null ? _ref1.message_text : void 0);
        }
      },
      getValue: function() {
        return this.refs.inputComponent.getDOMNode().value;
      },
      setValue: function(value) {
        this.refs.inputComponent.getDOMNode().value = value;
        return this.setState({
          value: value
        });
      },
      resizeComponent: function() {
        var $node, node;
        node = this.refs.inputComponent.getDOMNode();
        $node = $j(node);
        $node.css("height", "1px");
        return $node.css("height", node.scrollHeight + "px");
      },
      _renderFinished: function() {
        var _base;
        if (this.props.autoresize) {
          this.resizeComponent();
        }
        return typeof (_base = this.props).afterRender === "function" ? _base.afterRender() : void 0;
      },
      componentDidMount: function() {
        return this._renderFinished();
      },
      componentDidUpdate: function() {
        return this._renderFinished();
      },
      getInitialState: function() {
        return {
          value: this.props.value
        };
      },
      onChangeInternal: function(e) {
        var _base;
        if (typeof (_base = this.props).onChange === "function") {
          _base.onChange(e);
        }
        if (this.props.value) {

        } else if (this.props.valueLink) {
          return this.props.valueLink.requestChange(e.target.value);
        } else {
          return this.setState({
            value: e.target.value
          });
        }
      }
    });
  };
  return {
    password: text_input_gen("input", "password"),
    text: text_input_gen("input", "text"),
    textarea: text_input_gen("textarea", "text")
  };
});

//# sourceMappingURL=input.map
